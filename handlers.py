from aiogram import Dispatcher, Bot, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext


from keyboards import get_main_keyboard, back_inlinekb, get_stop_keyboard, start_inlinekb, soft_inlinekb, loading_mode_inlinekb, unloading_mode_inlinekb, targets_mode_inlinekb, content_mode_inlinekb, delete_soft_inlinekb, additional_functions_inlinekb

from config import BOT_TOKEN
from utils import UserDataManager, time_delet_message, is_link, name_correct, stop_soft
from state_machine import Status
import asyncio
import json

bot = Bot(token=BOT_TOKEN)
user_manager = UserDataManager('users.json', False)

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
async def back_handler(callback: CallbackQuery, state: FSMContext):
    if await state.get_state() == 'Status:CreateSoft_name' or await state.get_state() == 'Status:OpenSoft':
        await start(callback, state)
    if await state.get_state() == 'Status:OpenSoftSettings':
        await state.set_state(Status.OpenSoft)
        await opensoft(callback, state)
    if await state.get_state() == 'Status:OpenSoftSettingsTargetMod':
        soft = callback.data.split(".")[1]  # soft
        await state.set_state(Status.OpenSoftSettings)
        await callback.message.edit_text('üéØ <b>–í—ã–±–µ—Ä–∏ –∏—Å—Ç–æ—á–Ω–∏–∫:</b>  \n'
                                         '\n'
                                         '1. üì• <b>–ó–∞–≥—Ä—É–∑–∫–∞</b> ‚Äî –∑–∞–≥—Ä—É–∫–∞ –¥–∞–Ω–Ω—ã–π –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏.  \n'
                                         '2. üì§ <b>–í—ã–≥—Ä—É–∑–∫–∞</b> ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã–π –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å.  \n'
                                         '\n'
                                         'üëá <i>–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∏ –Ω–∞–∂–º–∏ –Ω–∞–Ω–µ–≥–æ!</i>\n', reply_markup=targets_mode_inlinekb(str(callback.from_user.id), soft))
    await callback.answer()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start_command(message: Message, state: FSMContext):
    await start(message, state)
async def start(message, state):
    if isinstance(message, Message):
        if not user_manager.get_user_data(str(message.from_user.id), 'soft'):
            user_manager.add_or_update_user_data(str(message.from_user.id), 'user_name', message.from_user.username)
            user_manager.add_or_update_user_data(str(message.from_user.id), 'first_name', message.from_user.first_name)
            user_manager.add_or_update_user_data(str(message.from_user.id), 'last_name', message.from_user.last_name)
        await message.answer(f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!</b>\n\n"
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ: \n"
                             "üëáüëáüëá", reply_markup=start_inlinekb(str(message.from_user.id)))
    if isinstance(message, CallbackQuery):
        if not user_manager.get_user_data(str(message.from_user.id), 'soft'):
            user_manager.add_or_update_user_data(str(message.from_user.id), 'user_name', message.from_user.username)
            user_manager.add_or_update_user_data(str(message.from_user.id), 'first_name', message.from_user.first_name)
            user_manager.add_or_update_user_data(str(message.from_user.id), 'last_name', message.from_user.last_name)
        await message.message.edit_text(f"üëã <b>{message.from_user.first_name}!</b>\n\n"
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ: \n"
                             "üëáüëáüëá", reply_markup=start_inlinekb(str(message.from_user.id)))
        await message.answer()
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ñ—Ç–∞
async def create_soft(callback: CallbackQuery, state: FSMContext):
    try:
        len_soft = len(user_manager.get_user_data(str(callback.from_user.id), 'soft'))
    except:
        len_soft = 0
    finally:
        if len_soft <= 5:
            await state.set_state(Status.CreateSoft_name)
            sent_message = await callback.message.edit_text(f"üëã <b>{callback.from_user.first_name}!</b>\n\n"
                                                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n"
                                                            "üëáüëáüëá\n"
                                                            "\n"
                                                            "üìù <b>–ü—Ä–∏–º–µ—Ä—ã –Ω–∞–∑–≤–∞–Ω–∏–π:</b>  \n"
                                                            "- soft\n"
                                                            "- —Å–æ—Ñ—Ç\n"
                                                            "- –ê–≤—Ç–æ–ø–æ—Å—Ç–µ—Ä\n"
                                                            "- AutoPost\n\n"
                                                            "–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π! üòä\n", reply_markup=back_inlinekb())
            await state.update_data(bot_message_id=sent_message.message_id)  
        else:
            sent_message = await callback.message.answer(f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ, {callback.from_user.first_name}!</b> ‚ö†Ô∏è\n"
                                                         "\n"
                                                         "üö´ <b>–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç!</b>  \n"
                                                         "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: <b>6</b>.  \n"
                                                         "\n"
                                                         "üìå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏ –æ–¥–Ω–æ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ.  \n"
                                                         "–ò–ª–∏ –∏–∑–º–µ–Ω–∏ —Å—Ç–∞—Ä–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:  \n"
                                                         "\n"
                                                         "1. üìã <b>–ù–∞–∂–º–∏ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</b>  \n"
                                                         "2. üîÑ <b>–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —Ñ—É–Ω–∫—Ü–∏–∏</b>  \n"
                                                         "3. üóëÔ∏è <b>–∏–ª–∏ –Ω–∞–∂–º–∏ üóëÔ∏è–£–¥–∞–ª–∏—Ç—å</b> \n"
                                                         "\n")
            asyncio.create_task(time_delet_message(chat_id=callback.message.chat.id, message_id=sent_message.message_id, time=5))
        await callback.answer()
         
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µk —Å–æ—Ñ—Ç–∞
async def settings_soft(callback: CallbackQuery, state: FSMContext):
    soft = callback.data.split(".")[1]  # soft
    settings = callback.data.split(".")[2]  # settings
    if settings == "loading_mode":
        await state.set_state(Status.OpenSoftSettings)
        await callback.message.edit_text('üéØ <b>–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏:</b> \n'
                                     '\n'
                                     '1. ‚§µÔ∏è <b>1 —Ä–∞–∑</b> ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞. \n'
                                     '2. üîÑ <b>–ü–æ—Å—Ç–æ—è–Ω–Ω–æ</b> ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. \n'
                                     '\n'
                                     'üëá <i>–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∏ –Ω–∞–∂–º–∏ –Ω–∞–Ω–µ–≥–æ!</i>', reply_markup=loading_mode_inlinekb(str(callback.from_user.id), soft))
    if settings == "unloading_mode":
        await state.set_state(Status.OpenSoftSettings)
        await callback.message.edit_text('üéØ <b>–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –≤—ã–≥—Ä—É–∑–∫–∏:</b>  \n'
                                     '\n'
                                     '1. üì± <b>Tik-Tok</b> ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ Tik-Tok.  \n'
                                     '2. üìπ <b>YouTube</b> ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ YouTube.\n'
                                     '3. üì∑ <b>Instagram</b> ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ Instagram.\n'
                                     '4. üìû <b>Vk</b> ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ/–ø–æ—Å—Ç –≤ –≥—Ä—É–ø–ø—É Telegram.\n'
                                     '5. üëØ‚Äç‚ôÄÔ∏è <b>–ì—Ä—É–ø–ø–∞</b> ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ Vk.\n'
                                     '6. üì© <b>–õ—Å</b> ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ/–ø–æ—Å—Ç–∞ –≤ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n'
                                     '7. üñ•Ô∏è <b>–°–µ—Ä–≤–µ—Ä</b> ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ/–ø–æ—Å—Ç –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä. \n'
                                     '\n'
                                     'üëá <i>–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∏ –Ω–∞–∂–º–∏ –Ω–∞–Ω–µ–≥–æ!</i>', reply_markup=unloading_mode_inlinekb(str(callback.from_user.id), soft))
    if settings == "targets":
        await state.set_state(Status.OpenSoftSettings)
        await callback.message.edit_text('üéØ <b>–í—ã–±–µ—Ä–∏ –∏—Å—Ç–æ—á–Ω–∏–∫:</b>  \n'
                                         '\n'
                                         '1. üì• <b>–ó–∞–≥—Ä—É–∑–∫–∞</b> ‚Äî –∑–∞–≥—Ä—É–∫–∞ –¥–∞–Ω–Ω—ã–π –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏.  \n'
                                         '2. üì§ <b>–í—ã–≥—Ä—É–∑–∫–∞</b> ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã–π –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å.  \n'
                                         '\n'
                                         'üëá <i>–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∏ –Ω–∞–∂–º–∏ –Ω–∞ –Ω–µ–≥–æ!</i>\n', reply_markup=targets_mode_inlinekb(str(callback.from_user.id), soft))
    if settings == "content":
        await state.set_state(Status.OpenSoftSettings)
        await callback.message.edit_text('üéØ <b>–í—ã–±–µ—Ä–∏ —á—Ç–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å:</b>\n'
                                     '\n'
                                     '1. üé• –í–∏–¥–µ–æ ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤. \n'
                                     '2. üßæ –ü–æ—Å—Ç ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ. \n'
                                     '\n'
                                     'üëá <i>–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏ –Ω–∞–∂–º–∏ –Ω–∞ –Ω–µ–≥–æ!!</i>', reply_markup=content_mode_inlinekb(str(callback.from_user.id), soft))
    if settings == "delete":
        await state.set_state(Status.OpenSoftSettings)
        await callback.message.edit_text('–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É?', reply_markup=delete_soft_inlinekb(str(callback.from_user.id), soft))
    if settings == "additional_functions":
        await state.set_state(Status.OpenSoftSettings)
        await callback.message.edit_text('üéØ <b>–í—ã–±–µ—Ä–∏ —á—Ç–æ –≤–∫–ª—é—á–∏—Ç—å:</b>\n'
                                     '\n'
                                     '1. üßæ –û—Ç—á–µ—Ç ‚Äî –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á–µ—Ç –∑–∞–¥–∞—á –±–æ—Ç–∞. \n'
                                     '2.  ü§ñ AI ‚Äî –ò–ò —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞. \n'
                                     '\n'
                                     'üëá <i>–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏ –Ω–∞–∂–º–∏ –Ω–∞ –Ω–µ–≥–æ!!</i>', reply_markup=additional_functions_inlinekb(str(callback.from_user.id), soft))
    if settings == "start":
        await starter_soft(callback, state)
    if settings == "stop":
        await starter_soft(callback, state)
    await callback.answer()
         
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ —Å–æ—Ñ—Ç–∞
async def open_soft(callback: CallbackQuery, state: FSMContext):
    await opensoft(callback, state)
async def opensoft(callback, state, soft=None):
    await state.set_state(Status.OpenSoft)
    soft_date = user_manager.get_user_data(str(callback.from_user.id), 'soft')
    if isinstance(callback, CallbackQuery):
        if soft == None:
            soft = callback.data.split(".")[1]  # soft
        if soft_date[f"{soft}"]["state"] == "start":
            soft_state = "–í–ö–õ ‚úÖ"
        else:
            soft_state = "–í–´–ö–õ ‚ùå"
        await callback.message.edit_text(f'üìõ <b>{soft}</b> | {soft_state}\n'
                        f'\n'
                        f'‚öôÔ∏è <b>–†–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏:</b> {name_correct(soft_date[f"{soft}"]["loading_mode"])} | {name_correct(soft_date[f"{soft}"]["content"])}\n'
                        f'‚öôÔ∏è <b>–†–µ–∂–∏–º –≤—ã–≥—Ä—É–∑–∫–∏:</b> {name_correct(soft_date[f"{soft}"]["unloading_mode"])}\n'
                        f'‚ú® <b>–î–æ–ø. —Ñ—É–Ω–∫—Ü–∏–∏</b> {name_correct(soft_date[f"{soft}"]["report"])}\n'
                        f'\n'
                        'üåê <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</b>\n'
                        f'‚¨áÔ∏è {name_correct(soft_date[f"{soft}"]["target_loading"])}\n'
                        f'‚¨ÜÔ∏è {name_correct(soft_date[f"{soft}"]["target_unloading"])}\n'
                        '\n'
                        f'üìù –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É! \n', reply_markup=soft_inlinekb(str(callback.from_user.id), soft), parse_mode="HTML")
        await callback.answer()
    if isinstance(callback, Message):
        soft = callback.text  # soft
        if soft_date[f"{soft}"]["state"] == "start":
            soft_state = "–í–ö–õ ‚úÖ"
        else:
            soft_state = "–í–´–ö–õ ‚ùå"
        await callback.answer(f'üìõ <b>{soft}</b> | {soft_state}\n'
                    f'\n'
                    f'‚öôÔ∏è <b>–†–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏:</b> {name_correct(soft_date[f"{soft}"]["loading_mode"])} | {name_correct(soft_date[f"{soft}"]["content"])}\n'
                    f'‚öôÔ∏è <b>–†–µ–∂–∏–º –≤—ã–≥—Ä—É–∑–∫–∏:</b> {name_correct(soft_date[f"{soft}"]["unloading_mode"])}\n'
                    f'‚ú® <b>–î–æ–ø. —Ñ—É–Ω–∫—Ü–∏–∏</b> {name_correct(soft_date[f"{soft}"]["report"])}\n'
                    f'\n'
                    'üåê <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</b>\n'
                    f'‚¨áÔ∏è {name_correct(soft_date[f"{soft}"]["target_loading"])}\n'
                    f'‚¨ÜÔ∏è {name_correct(soft_date[f"{soft}"]["target_unloading"])}\n'
                    '\n'
                    f'üìù –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!', reply_markup=soft_inlinekb(str(callback.from_user.id), soft), parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def user_input(message: Message, state: FSMContext):
    if await state.get_state() == 'Status:CreateSoft_name':
        if user_manager.get_user_data(str(message.from_user.id), 'soft'):
            soft_date = user_manager.get_user_data(str(message.from_user.id), 'soft')
            try:
                soft_date[f"{message.text}"]
                soft_copy = True
            except:
                soft_copy = False
            finally:
                if soft_copy:
                    sent_message = await message.answer(f'–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º {message.text} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
                    asyncio.create_task(time_delet_message(chat_id=message.chat.id, message_id=sent_message.message_id, time=5))
                    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                else:
                    soft_date[f"{message.text}"] = {
                                                    "loading_mode": "None",
                                                    "unloading_mode": "None",
                                                    "target_unloading": "None",
                                                    "target_loading": "None",
                                                    "content": "None",
                                                    "state": "stop",
                                                    "ai": "false",
                                                    "report": "false"
                                                    }
                    user_manager.add_or_update_user_data(str(message.from_user.id), 'soft', soft_date)
        else:
            soft_copy = False
            user_manager.add_or_update_user_data(str(message.from_user.id), 'soft', {f"{message.text}": {
                                                                                                        "loading_mode": "None",
                                                                                                        "unloading_mode": "None",
                                                                                                        "target_unloading": "None",
                                                                                                        "target_loading": "None",
                                                                                                        "content": "None",
                                                                                                        "state": "stop",
                                                                                                        "ai": "false",
                                                                                                        "report": "false"
                                                                                                        }
                                                                                     })
        if not soft_copy:
            state_data = await state.get_data()
            bot_message_id = state_data.get('bot_message_id')
            if bot_message_id:
                await bot.edit_message_text(chat_id=message.chat.id, message_id=bot_message_id, text=f'–ü—Ä–æ–≥—Ä–∞–º–º–∞ {message.text} —Å–æ–∑–¥–∞–Ω–∞!')    
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            asyncio.create_task(time_delet_message(chat_id=message.chat.id, message_id=bot_message_id, time=5))
            await opensoft(message, state)
    if await state.get_state() == 'Status:OpenSoftSettingsTargetMod':
        if not is_link(message.text):
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            bot_message = await message.answer(f'{message.text} —ç—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞!')
            asyncio.create_task(time_delet_message(chat_id=message.chat.id, message_id=bot_message.message_id, time=5))
        else:
            state_data = await state.get_data()
            soft = state_data.get('soft')  # mode
            mode = state_data.get('mode')  # soft
            soft_json = user_manager.get_user_data(str(message.from_user.id), 'soft')
            
            if mode == "target_loading":
                soft_json[f"{soft}"]["target_loading"] = f"{message.text}"
            if mode == "target_unloading":
                soft_json[f"{soft}"]["target_unloading"] = f"{message.text}"
            
            user_manager.add_or_update_user_data(str(message.from_user.id), 'soft', soft_json)
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            
            bot_message = await message.answer(f'–°—Å—ã–ª–∫–∞ {message.text} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!')
            asyncio.create_task(time_delet_message(chat_id=message.chat.id, message_id=bot_message.message_id, time=5))
            
            bot_message_id = state_data.get('bot_message_id')
            if bot_message_id:
                await state.set_state(Status.OpenSoftSettings)
                await bot.edit_message_text(chat_id=message.chat.id, message_id=bot_message_id, text='üéØ <b>–í—ã–±–µ—Ä–∏ –∏—Å—Ç–æ—á–Ω–∏–∫:</b>  \n'
                                                                                                        '\n'
                                                                                                        '1. üì• <b>–ó–∞–≥—Ä—É–∑–∫–∞</b> ‚Äî –∑–∞–≥—Ä—É–∫–∞ –¥–∞–Ω–Ω—ã–π –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏.  \n'
                                                                                                        '2. üì§ <b>–í—ã–≥—Ä—É–∑–∫–∞</b> ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã–π –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å.  \n'
                                                                                                        '\n'
                                                                                                        'üëá <i>–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∏ –Ω–∞–∂–º–∏ –Ω–∞–Ω–µ–≥–æ!</i>\n', reply_markup=targets_mode_inlinekb(str(message.from_user.id), soft))  

async def loading_mode(callback: CallbackQuery, state: FSMContext):
    soft = callback.data.split(".")[1]  # soft
    mode = callback.data.split(".")[2]  # mode
    soft_json = user_manager.get_user_data(str(callback.from_user.id), 'soft')
    soft_json[f"{soft}"]["loading_mode"] = f"{mode}"
    
    user_manager.add_or_update_user_data(str(callback.from_user.id), 'soft', soft_json)
    
    await callback.message.edit_text('üéØ <b>–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏:</b> \n'
                                     '\n'
                                     '1. ‚§µÔ∏è <b>1 —Ä–∞–∑</b> ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞. \n'
                                     '2. üîÑ <b>–ü–æ—Å—Ç–æ—è–Ω–Ω–æ</b> ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. \n'
                                     '\n'
                                     'üëá <i>–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∏ –Ω–∞–∂–º–∏ –Ω–∞–Ω–µ–≥–æ!</i>', reply_markup=loading_mode_inlinekb(str(callback.from_user.id), soft))
    await callback.answer()
    
async def unloading_mode(callback: CallbackQuery, state: FSMContext):
    soft = callback.data.split(".")[1]  # soft
    mode = callback.data.split(".")[2]  # mode
    soft_json = user_manager.get_user_data(str(callback.from_user.id), 'soft')
    soft_json[f"{soft}"]["unloading_mode"] = f"{mode}"
    
    if mode == "ls":
        soft_json[f"{soft}"]["target_unloading"] = "–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–æ—Ç–∞"
    if mode == "server":
        soft_json[f"{soft}"]["target_unloading"] = "–°–µ—Ä–≤–µ—Ä"
    if mode != "ls" and  mode != "server":
        soft_json[f"{soft}"]["target_unloading"] = "None"
        
    
    user_manager.add_or_update_user_data(str(callback.from_user.id), 'soft', soft_json)
    
    await callback.message.edit_text('üéØ <b>–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –≤—ã–≥—Ä—É–∑–∫–∏:</b>  \n'
                                     '\n'
                                     '1. üì± <b>Tik-Tok</b> ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ Tik-Tok.  \n'
                                     '2. üìπ <b>YouTube</b> ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ YouTube.\n'
                                     '3. üì∑ <b>Instagram</b> ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ Instagram.\n'
                                     '4. üìû <b>Vk</b> ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ/–ø–æ—Å—Ç –≤ –≥—Ä—É–ø–ø—É Telegram.\n'
                                     '5. üëØ‚Äç‚ôÄÔ∏è <b>–ì—Ä—É–ø–ø–∞</b> ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ Vk.\n'
                                     '6. üì© <b>–õ—Å</b> ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ/–ø–æ—Å—Ç–∞ –≤ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n'
                                     '7. üñ•Ô∏è <b>–°–µ—Ä–≤–µ—Ä</b> ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ/–ø–æ—Å—Ç –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä. \n'
                                     '\n'
                                     'üëá <i>–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∏ –Ω–∞–∂–º–∏ –Ω–∞–Ω–µ–≥–æ!</i>', reply_markup=unloading_mode_inlinekb(str(callback.from_user.id), soft))
    await callback.answer()
    
async def targets_mode(callback: CallbackQuery, state: FSMContext):
    soft = callback.data.split(".")[1]  # soft
    mode = callback.data.split(".")[2]  # mode
    soft_json = user_manager.get_user_data(str(callback.from_user.id), 'soft')
    
    if soft_json[f"{soft}"]["loading_mode"] != "None" and soft_json[f"{soft}"]["unloading_mode"] != "None":
        await state.set_state(Status.OpenSoftSettingsTargetMod)
        await state.update_data(mode=mode)
        await state.update_data(soft=soft)
        content = soft_json[f"{soft}"]["content"]
        if content == 'video':
            content = '–≤–∏–¥–µ–æ'
            smile = "üé•"
        if content == 'post':
            content = '–ø–æ—Å—Ç'
            smile = "üßæ"
        if content == 'None':
            content = '–∫–æ–Ω—Ç–µ–Ω—Ç'
            smile = "üìä"
                
                
        if mode == "target_loading":
            text = f'–∫–∞–Ω–∞–ª–∞, –æ—Ç–∫—É–¥–∞ –∑–∞–≥—Ä—É–∂–∞—Ç—å {content}'
            url = "https://t.me/ChannelName"
            
        if mode == "target_unloading":
            unloading_mode = soft_json[f"{soft}"]["unloading_mode"]
            if unloading_mode == "tiktok":
                text = f'Tik-Tok, –∫—É–¥–∞ –∑–∞–≥—Ä—É–∂–∞—Ç—å {content}'
                link_content = 'cookies'
                url = '\n[{\n"name": "name",\n"value": "value",\n"domain": "domain",\n"path": "path",\n"expires": expires,\n"httpOnly": httpOnly,\n"secure": secure,\n"sameSite": "sameSite"\n}]'
            if unloading_mode == "youtube":
                text = f'YouTube, –∫—É–¥–∞ –∑–∞–≥—Ä—É–∂–∞—Ç—å {content}'
                link_content = 'cookies'
                url = '\n[{\n"name": "name",\n"value": "value",\n"domain": "domain",\n"path": "path",\n"expires": expires,\n"httpOnly": httpOnly,\n"secure": secure,\n"sameSite": "sameSite"\n}]'
            if unloading_mode == "instagram":
                text = f'Instagram –∫—É–¥–∞ –∑–∞–≥—Ä—É–∂–∞—Ç—å {content}'
                link_content = 'cookies'
                url = '\n[{\n"name": "name",\n"value": "value",\n"domain": "domain",\n"path": "path",\n"expires": expires,\n"httpOnly": httpOnly,\n"secure": secure,\n"sameSite": "sameSite"\n}]'
            if unloading_mode == "vk":
                text = f'Vk, –∫—É–¥–∞ –∑–∞–≥—Ä—É–∂–∞—Ç—å {content}'
                link_content = 'api kay'
                url = "vk1.a.ehgcnruwegrt7ywi3grci34g87r4cc_4398vw348o7nvyw87389_v8ny487wi45455"
            if unloading_mode == "tg_chenal":
                link_content = '—Å—Å—ã–ª–∫—É'
                text = f'–∫–∞–Ω–∞–ª, –∫—É–¥–∞ –∑–∞–≥—Ä—É–∂–∞—Ç—å {content}'
                url = "https://t.me/ChannelName"
        
        
        sent_message = await callback.message.edit_text(f'{smile} <b>–û—Ç–ø—Ä–∞–≤—å {link_content} –Ω–∞ {text}:</b>\n'
                                                        '\n'
                                                        'üëá <i>–ü—Ä–∏–º–µ—Ä:</i>  \n'
                                                        f'üîó <code>{url}</code>  \n'
                                                        '\n'
                                                        'üìå <i>–£–±–µ–¥–∏—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞!</i> \n', parse_mode="HTML", reply_markup=back_inlinekb(soft))
        await state.update_data(bot_message_id=sent_message.message_id)  
        await callback.answer()
    else:
        await callback.answer('–†–µ–∂–∏–º—ã –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –≤—ã–≥—Ä—É–∑–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã!')

async def content_mode(callback: CallbackQuery, state: FSMContext):
    soft = callback.data.split(".")[1]  # soft
    mode = callback.data.split(".")[2]  # mode
    soft_json = user_manager.get_user_data(str(callback.from_user.id), 'soft')
    soft_json[f"{soft}"]["content"] = f"{mode}"
    
    user_manager.add_or_update_user_data(str(callback.from_user.id), 'soft', soft_json)
    
    await callback.message.edit_text('üéØ <b>–í—ã–±–µ—Ä–∏ —á—Ç–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å:</b>\n'
                                     '\n'
                                     '1. üé• –í–∏–¥–µ–æ ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤. \n'
                                     '2. üßæ –ü–æ—Å—Ç ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ. \n'
                                     '\n'
                                     'üëá <i>–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏ –Ω–∞–∂–º–∏ –Ω–∞–Ω–µ–≥–æ!!</i>', reply_markup=content_mode_inlinekb(str(callback.from_user.id), soft))
    await callback.answer()
    
async def delete_soft(callback: CallbackQuery, state: FSMContext):
    soft = callback.data.split(".")[1]  # soft
    soft_json = user_manager.get_user_data(str(callback.from_user.id), 'soft')
    soft_json.pop(f"{soft}", None)
    user_manager.add_or_update_user_data(str(callback.from_user.id), 'soft', soft_json)  
    await state.set_state(None)
    await start(callback, state)         
    
    await callback.answer(f'–ü—Ä–æ–≥—Ä–∞–º–º–∞ {soft} —É–¥–∞–ª–µ–Ω–∞!')
    
async def starter_soft(callback, state):
    soft = callback.data.split(".")[1]  # soft
    mode = callback.data.split(".")[2]  # mode
    
    get_soft_date = user_manager.get_user_data(str(callback.from_user.id), 'soft')[f'{soft}']
    soft_json = user_manager.get_user_data(str(callback.from_user.id), 'soft')
    

    if mode == 'start':
        if get_soft_date['target_unloading'] == 'None' and get_soft_date['target_loading'] == 'None':
            await callback.answer(f'üö´ –û—à–∏–±–∫–∞, –Ω–µ –∑–∞–¥–∞–Ω—ã —Å—Å—ã–ª–∫–∏!')
        elif get_soft_date['content'] == 'None':
            await callback.answer(f'üö´ –û—à–∏–±–∫–∞, –Ω–µ –∑–∞–¥–∞–Ω–æ —á—Ç–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å!')
        else:
            if get_soft_date['state'] == 'start':
                await callback.answer(f'–ü—Ä–æ–≥—Ä–∞–º–º–∞ {soft} —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!')
            else:
                soft_json[f"{soft}"]["state"] = "start"   
                user_manager.add_or_update_user_data(str(callback.from_user.id), 'soft', soft_json)
                
                await callback.answer(f'üéâ –ü—Ä–æ–≥—Ä–∞–º–º–∞ {soft} –∑–∞–ø—É—â–µ–Ω–∞!')
                await opensoft(callback, state, soft)
        
    if mode == 'stop':
        if get_soft_date['state'] == 'stop':
            await callback.answer(f'–ü—Ä–æ–≥—Ä–∞–º–º–∞ {soft} —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞!')
        else:
            soft_json[f"{soft}"]["state"] = "stop"
            user_manager.add_or_update_user_data(str(callback.from_user.id), 'soft', soft_json)
            
            await callback.answer(f'üòî –ü—Ä–æ–≥—Ä–∞–º–º–∞ {soft} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!')
            print("–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            
            await opensoft(callback, state, soft)
            
            
async def additional_functions(callback: CallbackQuery, state: FSMContext):
    soft = callback.data.split(".")[1]  # soft
    mode = callback.data.split(".")[2]  # mode
    soft_json = user_manager.get_user_data(str(callback.from_user.id), 'soft')
    
    if mode == "ai":
        if soft_json[f"{soft}"]["ai"] == "false":
            soft_json[f"{soft}"]["ai"] = "true"
        else:
            soft_json[f"{soft}"]["ai"] = "false"
    if mode == "report":
        if soft_json[f"{soft}"]["report"] == "false":
            soft_json[f"{soft}"]["report"] = "true"
        else:
            soft_json[f"{soft}"]["report"] = "false"
        
    
    user_manager.add_or_update_user_data(str(callback.from_user.id), 'soft', soft_json)
    
    await callback.message.edit_text('üéØ <b>–í—ã–±–µ—Ä–∏ —á—Ç–æ –≤–∫–ª—é—á–∏—Ç—å:</b>\n'
                                     '\n'
                                     '1. üßæ –û—Ç—á–µ—Ç ‚Äî –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á–µ—Ç –∑–∞–¥–∞—á –±–æ—Ç–∞. \n'
                                     '2.  ü§ñ AI ‚Äî –ò–ò —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞. \n'
                                     '\n'
                                     'üëá <i>–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏ –Ω–∞–∂–º–∏ –Ω–∞ –Ω–µ–≥–æ!!</i>', reply_markup=additional_functions_inlinekb(str(callback.from_user.id), soft))
    await callback.answer()
    
async def loop_task(message: Message, state: FSMContext):
    print('\n')
    current_tasks = asyncio.all_tasks()
    for task_name in current_tasks:
        print(f'{task_name.get_name()}')
def register_handler_message(dp: Dispatcher):
    dp.message.register(start_command, Command(commands= ['start']))
    dp.message.register(loop_task, Command(commands= ['task']))
    dp.message.register(user_input, F.text)
    dp.callback_query.register(back_handler, F.data.startswith("back."))
    
    dp.callback_query.register(open_soft, F.data.startswith("soft."))
    dp.callback_query.register(settings_soft, F.data.startswith("settings_soft."))
    dp.callback_query.register(create_soft, F.data.startswith("create_soft"))
    
    dp.callback_query.register(loading_mode, F.data.startswith("loading_mode."))
    dp.callback_query.register(unloading_mode, F.data.startswith("unloading_mode."))
    dp.callback_query.register(targets_mode, F.data.startswith("targets_mode."))
    dp.callback_query.register(content_mode, F.data.startswith("content_mode."))
    dp.callback_query.register(delete_soft, F.data.startswith("delete_soft."))
    dp.callback_query.register(additional_functions, F.data.startswith("additional_functions."))