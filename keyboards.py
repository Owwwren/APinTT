from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from utils import UserDataManager


user_manager = UserDataManager('users.json', False)

def get_main_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ (–≤–∏–¥–µ–æ –∏–ª–∏ –ø–æ—Å—Ç)."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìπ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ", callback_data="regime_video")],
        [InlineKeyboardButton(text="üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç", callback_data="regime_post")]
    ])
    return keyboard

def back_inlinekb(soft=False):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ username –∫–∞–Ω–∞–ª–∞."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back.{soft}")]
    ])
    return keyboard

def get_stop_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop_listening")]
    ])
    return keyboard

def delete_soft_inlinekb(user_id, soft):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data=f"delete_soft.{soft}"),
        InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"back.{soft}")]
    ])
    return keyboard




def start_inlinekb(user_id):   
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_softs = user_manager.get_user_data(user_id, 'soft')

    if user_softs:
        
        keyboard_buttons = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É" –æ—Ç–¥–µ–ª—å–Ω–æ
        keyboard_buttons.append([InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É", callback_data="create_soft")])

        # –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏—Ö –ø–æ 2 –≤ —Ä—è–¥
        row = []
        for i, soft in enumerate(user_softs):
            row.append(InlineKeyboardButton(text=soft, callback_data=f"soft.{soft}"))
            # –ï—Å–ª–∏ —Ä—è–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä—è–¥
            if len(row) == 2:
                keyboard_buttons.append(row)
                row = []

        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —Ü–∏–∫–ª–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥
        if row:
            keyboard_buttons.append(row)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É", callback_data="create_soft")]
        ])
    return keyboard


def soft_inlinekb(user_id, soft):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ—Ñ—Ç–∞"""
    button = [
        [InlineKeyboardButton(text="üì•–ó–∞–≥—Ä—É–∑–∫–∞", callback_data=f"settings_soft.{soft}.loading_mode"),
        InlineKeyboardButton(text="–ß—Ç–æ –∑–∞–≥—Ä—É–∂–∞—Ç—åüîç", callback_data=f"settings_soft.{soft}.content"),
        InlineKeyboardButton(text="–í—ã–≥—Ä—É–∑–∫–∞üì§", callback_data=f"settings_soft.{soft}.unloading_mode")],
        [InlineKeyboardButton(text="üîó–ò—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data=f"settings_soft.{soft}.targets"),
        InlineKeyboardButton(text="‚öôÔ∏è–î–æ–ø. —Ñ—É–Ω–∫—Ü–∏–∏", callback_data=f"settings_soft.{soft}.additional_functions")],
        [InlineKeyboardButton(text="üóë–£–¥–∞–ª–∏—Ç—å", callback_data=f"settings_soft.{soft}.delete"),
        InlineKeyboardButton(text="üîÑ–°–º–µ–Ω–∏—Ç—å", callback_data=f"back.{soft}")]  
    ]
    
    if user_manager.get_user_data(user_id, 'soft')[f"{soft}"]["state"] == 'start':
        button.append([InlineKeyboardButton(text="–°—Ç–æ–ø", callback_data=f"settings_soft.{soft}.stop")])
    if user_manager.get_user_data(user_id, 'soft')[f"{soft}"]["state"] == 'stop':
        button.append([InlineKeyboardButton(text="–°—Ç–∞—Ä—Ç", callback_data=f"settings_soft.{soft}.start")])
        
    keyboard = InlineKeyboardMarkup(inline_keyboard=button)
    return keyboard


def loading_mode_inlinekb(user_id, soft):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ (1 —Ä–∞–∑ –∏–ª–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ)."""
    button = []
    loading_mode = user_manager.get_user_data(user_id, 'soft')[f"{soft}"]["loading_mode"]
    if loading_mode == "None":
        button.append([InlineKeyboardButton(text="1 —Ä–∞–∑", callback_data=f"loading_mode.{soft}.once"),
                       InlineKeyboardButton(text="–ü–æ—Å—Ç–æ—è–Ω–Ω–æ", callback_data=f"loading_mode.{soft}.continuous")])
    if loading_mode == "once":
        button.append([InlineKeyboardButton(text="1 —Ä–∞–∑ ‚úÖ", callback_data=f"loading_mode.{soft}.once"),
                       InlineKeyboardButton(text="–ü–æ—Å—Ç–æ—è–Ω–Ω–æ", callback_data=f"loading_mode.{soft}.continuous")])
    if loading_mode == "continuous":
        button.append([InlineKeyboardButton(text="1 —Ä–∞–∑", callback_data=f"loading_mode.{soft}.once"),
                       InlineKeyboardButton(text="–ü–æ—Å—Ç–æ—è–Ω–Ω–æ ‚úÖ", callback_data=f"loading_mode.{soft}.continuous")])
        
    button.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back.{soft}")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=button)
    return keyboard

def unloading_mode_inlinekb(user_id, soft):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –≤—ã–≥—Ä—É–∑–∫–∏ (–ª—Å –±–æ—Ç–∞, —Å–µ—Ä–≤–µ—Ä, Tik-Tok, YouTube, instagram, vk)."""
    unloading_mode = user_manager.get_user_data(user_id, 'soft')[f"{soft}"]["unloading_mode"]
    if unloading_mode == "tiktok":
        tiktok = "Tik-Tok ‚úÖ"
    if unloading_mode != "tiktok":
        tiktok = "Tik-Tok"
    if unloading_mode == "youtube":
        youtube = "YouTube ‚úÖ"
    if unloading_mode != "youtube":
        youtube = "YouTube"
    if unloading_mode == "instagram":
        instagram = "Instagram ‚úÖ"
    if unloading_mode != "instagram":
        instagram = "Instagram"
    if unloading_mode == "vk":
        vk = "Vk ‚úÖ"
    if unloading_mode != "vk":
        vk = "Vk"
    if unloading_mode == "ls":
        ls = "–õ—Å ‚úÖ"
    if unloading_mode != "ls":
        ls = "–õ—Å"
    if unloading_mode == "server":
        server = "–°–µ—Ä–≤–µ—Ä ‚úÖ"
    if unloading_mode != "server":
        server = "–°–µ—Ä–≤–µ—Ä"
    if unloading_mode == "tg_chenal":
        group = "–ì—Ä—É–ø–ø–∞ ‚úÖ"
    if unloading_mode != "tg_chenal":
        group = "–ì—Ä—É–ø–ø–∞"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{tiktok}", callback_data=f"unloading_mode.{soft}.tiktok"),
        InlineKeyboardButton(text=f"{youtube}", callback_data=f"unloading_mode.{soft}.youtube")],
        [InlineKeyboardButton(text=f"{instagram}", callback_data=f"unloading_mode.{soft}.instagram"),
        InlineKeyboardButton(text=f"{vk}", callback_data=f"unloading_mode.{soft}.vk")],
        [InlineKeyboardButton(text=f"{ls}", callback_data=f"unloading_mode.{soft}.ls"),
        InlineKeyboardButton(text=f"{server}", callback_data=f"unloading_mode.{soft}.server")],
        [InlineKeyboardButton(text=f"{group}", callback_data=f"unloading_mode.{soft}.tg_chenal")],
        [InlineKeyboardButton(text=f"üîô –ù–∞–∑–∞–¥", callback_data=f"back.{soft}")]
    ])
    return keyboard

def targets_mode_inlinekb(user_id, soft):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞."""
    row = []
    target_unloading = user_manager.get_user_data(user_id, 'soft')[f"{soft}"]["target_unloading"]
    target_loading = user_manager.get_user_data(user_id, 'soft')[f"{soft}"]["target_loading"]
    unloading_mode = user_manager.get_user_data(user_id, 'soft')[f"{soft}"]["unloading_mode"]
    if target_loading != "None":
        row.append(InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∫–∞ ‚úÖ", callback_data=f"targets_mode.{soft}.target_loading"))
    if target_loading == "None":
        row.append(InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∫–∞", callback_data=f"targets_mode.{soft}.target_loading"))
    if target_unloading != "None" and unloading_mode != "ls" and unloading_mode != "server":
        row.append(InlineKeyboardButton(text="–í—ã–≥—Ä—É–∑–∫–∞ ‚úÖ", callback_data=f"targets_mode.{soft}.target_unloading"))
    if target_unloading == "None" and unloading_mode != "ls" and unloading_mode != "server":
        row.append(InlineKeyboardButton(text="–í—ã–≥—Ä—É–∑–∫–∞", callback_data=f"targets_mode.{soft}.target_unloading"))

    button = [row]
    button.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back.{soft}")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=button)
    return keyboard


def content_mode_inlinekb(user_id, soft):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
    button = []
    content = user_manager.get_user_data(user_id, 'soft')[f"{soft}"]["content"]
    if content == "None":
        button.append([InlineKeyboardButton(text="–í–∏–¥–µ–æ", callback_data=f"content_mode.{soft}.video"),
                       InlineKeyboardButton(text="–ü–æ—Å—Ç", callback_data=f"content_mode.{soft}.post")])
    if content == "video":
        button.append([InlineKeyboardButton(text="–í–∏–¥–µ–æ ‚úÖ", callback_data=f"content_mode.{soft}.video"),
                       InlineKeyboardButton(text="–ü–æ—Å—Ç", callback_data=f"content_mode.{soft}.post")])
    if content == "post":
        button.append([InlineKeyboardButton(text="–í–∏–¥–µ–æ", callback_data=f"content_mode.{soft}.video"),
                       InlineKeyboardButton(text="–ü–æ—Å—Ç ‚úÖ", callback_data=f"content_mode.{soft}.post")])
        
    button.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back.{soft}")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=button)
    return keyboard


def additional_functions_inlinekb(user_id, soft):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
    button = []
    report = user_manager.get_user_data(user_id, 'soft')[f"{soft}"]["report"]
    ai = user_manager.get_user_data(user_id, 'soft')[f"{soft}"]["ai"]
    if report == "false" and ai == "false":
        button.append([InlineKeyboardButton(text="AI", callback_data=f"additional_functions.{soft}.ai"),
                       InlineKeyboardButton(text="–û—Ç—á–µ—Ç", callback_data=f"additional_functions.{soft}.report")])
    if ai == "true" and report == "false":
        button.append([InlineKeyboardButton(text="AI ‚úÖ", callback_data=f"additional_functions.{soft}.ai"),
                       InlineKeyboardButton(text="–û—Ç—á–µ—Ç", callback_data=f"additional_functions.{soft}.report")])
    if report == "true" and ai == "false":
        button.append([InlineKeyboardButton(text="AI", callback_data=f"additional_functions.{soft}.ai"),
                       InlineKeyboardButton(text="–û—Ç—á–µ—Ç ‚úÖ", callback_data=f"additional_functions.{soft}.report")])
    if report == "true" and ai == "true":
        button.append([InlineKeyboardButton(text="AI ‚úÖ", callback_data=f"additional_functions.{soft}.ai"),
                       InlineKeyboardButton(text="–û—Ç—á–µ—Ç ‚úÖ", callback_data=f"additional_functions.{soft}.report")])
        
    button.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back.{soft}")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=button)
    return keyboard
