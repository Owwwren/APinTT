import os
import re
import json
import asyncio
from aiogram import Bot
from config import BOT_TOKEN
bot = Bot(token=BOT_TOKEN)

def name_correct(text):
    if text == 'once':
        text = '1 —Ä–∞–∑'
    if text == 'continuous':
        text = '–ü–æ—Å—Ç–æ—è–Ω–Ω–æ'
        
    if text == 'tiktok':
        text = 'Tik-Tok'
    if text == 'youtube':
        text = 'YouTube'
    if text == 'instagram':
        text = 'Instagram'
    if text == 'vk':
        text = 'Vk'
    if text == 'ls':
        text = '–õ–∏—á. —Å–æ–æ–±—â.'
    if text == 'tg_chenal':
        text = '–¢–ì –ö–∞–Ω–∞–ª'
    if text == 'server':
        text = '–°–µ—Ä–≤–µ—Ä'
    if text == 'video':
        
        text = '–í–∏–¥–µ–æ'
    if text == 'post':
        text = '–ü–æ—Å—Ç'
        
    if text == 'None':
        text = '–ù–µ –∑–∞–¥–∞–Ω–æ'
    return text




def is_valid_cookie(cookie):
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –æ–±—ä–µ–∫—Ç–µ –∫—É–∫–∏
    required_fields = {"name", "value", "domain", "path", "expires", "httpOnly", "secure", "sameSite"}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –æ–±—ä–µ–∫—Ç–µ
    return required_fields.issubset(cookie.keys())

def validate_cookies(cookies_json):
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å JSON
        cookies = json.loads(cookies_json)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫
        if not isinstance(cookies, list):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç –≤ —Å–ø–∏—Å–∫–µ
        for cookie in cookies:
            if not is_valid_cookie(cookie):
                return False
        
        return True
    except json.JSONDecodeError:
        return False

def is_link(text):
    if validate_cookies(text):
        return True
    else:
        # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–∫–∏
        link_pattern = re.compile(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+')
        return bool(link_pattern.search(text))


async def time_delet_message(chat_id, message_id, time):
    await asyncio.sleep(time)
    await bot.delete_message(chat_id=chat_id, message_id=message_id)
    
    
def ensure_folder_exists(folder):
    if not os.path.exists(folder):
        os.makedirs(folder)
    


class UserDataManager:
    def __init__(self, filename, debug=False):
        self.filename = filename
        self.debug = debug
        self.ensure_file_exists()

    def ensure_file_exists(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç."""
        if not os.path.exists(self.filename):
            if self.debug:
                print(self.filename)
            with open(self.filename, 'w') as file:
                json.dump({}, file)

    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞."""
        with open(self.filename, 'r') as file:
            if self.debug:
                print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ {self.filename}")
            return json.load(file)

    def save_data(self, data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª."""
        with open(self.filename, 'w') as file:
            if self.debug:
                print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª {self.filename}\n")
            json.dump(data, file, indent=4)

    def add_or_update_user_data(self, user_id, key, value):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        data = self.load_data()

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –Ω–µ–≥–æ
        if user_id not in data:
            if self.debug:
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω")
            data[user_id] = {}

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data[user_id][key] = value

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if self.debug:
            print(f"–î–∞–Ω–Ω—ã–µ {data} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        self.save_data(data)

    def get_user_data(self, user_id=None, key=None):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–ª—é—á—É."""
        data = self.load_data()
        if self.debug:
            print(f"–î–∞–Ω–Ω—ã–µ {data} —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤–∑—è—Ç—ã.")
        if user_id == None:
            return data
        if key == None:
            return data.get(user_id, None)
        else:
            return data.get(user_id, {}).get(key, None)

    def remove_duplicates(self):
        """–£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö."""
        data = self.load_data()

        return data


async def stop_soft(soft_json, soft, run_task, callback, user_manager):
    soft_json[f"{soft}"]["state"] = "stop"
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏
    current_tasks = asyncio.all_tasks()
    task = run_task.get_user_data(str(callback.from_user.id), soft)
    
    # –ò—â–µ–º –∑–∞–¥–∞—á—É –ø–æ –∏–º–µ–Ω–∏
    for task_name in current_tasks:
        print(f'{task_name.get_name()} | {task}')
        if task_name.get_name() == task:
            task_name.cancel()
            try:
                await task_name
            except asyncio.CancelledError: 
                
                run_task.add_or_update_user_data(str(callback.from_user.id), str(soft), 'None')
               
                user_manager.add_or_update_user_data(str(callback.from_user.id), 'soft', soft_json)
                await callback.answer(f'üòî –ü—Ä–æ–≥—Ä–∞–º–º–∞ {soft} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!')
                print("–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
                return callback